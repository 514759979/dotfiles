#!/noah/bin/python3
# -*- coding:utf-8 -*-

"""
local-patrol tool
"""

import encodings.idna, getopt, json, socket, sys, threading, time

ERROR_TYPE = (
    "ok",                 # 0
    "connect refused",    # 1
    "connect timeout",    # 2
    "dns parse error",    # 3
    "read timeout",       # 4
    "write timeout",      # 5
    "read data error",    # 6
    "write data error",   # 7
    "text error",         # 8
    "net protocol error", # 9
    "conf error",         # 10
    "internal error",     # 11
)

def print_help():
    print('Usage:')
    print('    ' + sys.argv[0] + ' -f/--conf /path/to/conf [ -t/--max-running-time n ]')

def patrol(name, host, port, protocol, timeout, req_type, req_content, res_check):
    def print_result(result):
        sys.stdout.write(name + ':"' + result[0] + '"\n' +
            name + '_res_time:"' + result[1] + '"\n')

    # [ERROR_TYPE, time(ms)]
    result = [ERROR_TYPE[0], '0']

    start_time = time.time()

    s = None
    if protocol == 'tcp':
        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    elif protocol == 'udp':
        s = socket.socket(socket.AF_INET,socket.SOCK_DGRAM)
    else:
        result[0] = ERROR_TYPE[10] + ', unsupported protocol ' + protocol
        print_result(result)
        return

    if timeout > 0.0:
       s.settimeout(timeout)

    try:
        s.connect((host, port))
    except ConnectionRefusedError as e:
        result[0] = ERROR_TYPE[1]
    except socket.timeout as e:
        result[0] = ERROR_TYPE[2]
    except Exception as e:
        result[0] = ERROR_TYPE[11] + ', ' + str(e)

    if result[0] != ERROR_TYPE[0]:
        result[1] = str(int((time.time() - start_time) * 1000))
        print_result(result)
        return

    if req_type == 'port':
        result[0] = ERROR_TYPE[0]
    elif req_type == 'text':
        while True:
            if len(req_content) > 0:
                try:
                    s.send(req_content)
                except socket.timeout as e:
                    result[0] = ERROR_TYPE[5]
                    break
                except Exception as e:
                    result[0] = ERROR_TYPE[7] + ', ' + str(e)
                    break

            res_content = b''
            while True:
                try:
                    buffer = s.recv(1024)
                    if len(buffer) == 0:
                        result[0] = ERROR_TYPE[8]
                        break
                    res_content += buffer
                except socket.timeout as e:
                    result[0] = ERROR_TYPE[4]
                    break
                except Exception as e:
                    result[0] = ERROR_TYPE[6]  + ', ' + str(e)
                    break

                if res_check in res_content:
                    result[0] = ERROR_TYPE[0]
                    break
            break
    else:
        result[0] = ERROR_TYPE[10] + ', unsupported req_type ' + req_type

    s.close()

    result[1] = str(int((time.time() - start_time) * 1000))
    print_result(result)


if __name__ == '__main__':
    conf_file_name = 'default_machine_request.conf'
    max_running_time = 0

    try:
        options, args = getopt.getopt(sys.argv[1:], 'hf:t:', ['help', 'conf=', 'max-running-time='])
    except getopt.GetoptError as e:
        print('Error:', e)
        print_help()
        exit(1)

    for name, value in options:
        if name in ('-h', '--help'):
            print_help()
            exit(1)
        elif name in ('-f', '--conf'):
            conf_file_name = value
        elif name in ('-t', '--max-running-time'):
            try:
                max_running_time = float(value)
            except Exception:
                print_help()
                exit(1)

    conf_content = None

    try:
        conf_file = open(conf_file_name)
        conf_content = json.load(conf_file, strict = False)
        conf_file.close()
    except Exception as e:
        print('error:"' + ERROR_TYPE[10] + ', ' + str(e) + '"')
        if 'conf_file' in locals():
            conf_file.close()
        exit(1)

    if not 'request' in conf_content:
        print('error:"' + ERROR_TYPE[10] + ', no requst field"')
        exit(1)

    for i in conf_content['request']:
        try:
            name = i['name']
            port = int(i['port'])
            host = i.get('host', '127.0.0.1')
            protocol = i.get('protocol', 'tcp')
            req_type = i.get('req_type', 'port')
            req_content = bytes(i.get('req_content', ''), encoding = 'utf-8')
            res_check = bytes(i.get('res_check', ''), encoding = 'utf-8')
            timeout = float(i.get('timeout', 0))
            if max_running_time > 0.1 and (timeout <= 0.0 or timeout > max_running_time - 0.1):
                timeout = max_running_time - 0.1

            threading.Thread(target = patrol, args =
                (name, host, port, protocol, timeout, req_type, req_content, res_check)).start()
        except Exception as e:
            if not 'name' in locals():
                name = 'error'
            print(name + ':"' + ERROR_TYPE[10] + ', ' + str(e) + '"')
